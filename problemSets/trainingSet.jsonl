{"messages": [{"role": "system", "content": "You are a helpful assistant with expertise in programming."}, {"role": "user", "content": "class Foo {\n    //Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such\n    //that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n    //Notice that the solution set must not contain duplicate triplets.\n    //Constraints: 3 <= nums.length <= 3000 , -10^5 <= nums[i] <= 10^5\n    public List<List<Integer>> threeSum(int[] nums) {\n        <insert Code here>\n    }\n}"}, {"role": "assistant", "content": "List<List<Integer>> res = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {\n                int lo = i + 1, hi = nums.length - 1, sum = 0 - nums[i];\n                while (lo < hi) {\n                    if (nums[lo] + nums[hi] == sum) {\n                        res.add(Arrays.asList(nums[i], nums[lo], nums[hi]));\n                        while (lo < hi && nums[lo] == nums[lo + 1]) lo++;\n                        while (lo < hi && nums[hi] == nums[hi - 1]) hi--;\n                        lo++;\n                        hi--;\n                    } else if (nums[lo] + nums[hi] < sum) lo++;\n                    else hi--;\n                }\n            }\n        }\n        return res;"}]}